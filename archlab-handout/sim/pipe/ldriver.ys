#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
##################################################################
# You can modify this portion
	xorq %rax,%rax		# count = 0;
# 5 个一组的数字一起做
	jmp EndLoop0
Loop0:
    mrmovq (%rdi), %r10	# read val from src...
    mrmovq 8(%rdi), %r11
    mrmovq 16(%rdi), %r12
    mrmovq 24(%rdi), %r13
    mrmovq 32(%rdi), %r14
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)
	rmmovq %r12, 16(%rsi)
	rmmovq %r13, 24(%rsi)
	rmmovq %r14, 32(%rsi)

	andq %r10, %r10		# val <= 0?
	jle Npos0		    # if so, goto Npos0:
	iaddq $1, %rax		# count++
Npos0:
	andq %r11, %r11
	jle Npos1
	iaddq $1, %rax
Npos1:
	andq %r12, %r12
	jle Npos2
	iaddq $1, %rax
Npos2:
	andq %r13, %r13
	jle Npos3
	iaddq $1, %rax
Npos3:
	andq %r14, %r14
	jle Npos4
	iaddq $1, %rax
Npos4:
	iaddq $-5, %rdx		# len-=5
	iaddq $40, %rdi		# src+=5
	iaddq $40, %rsi		# dst+=5
EndLoop0:
    rrmovq %rdx, %r10
	iaddq $-5, %r10
    andq %r10, %r10		# len - 5 >= 0
    jge Loop0               # 则跳转

# 剩余数字的循环
remainder:
    iaddq $-2, %rdx     # len in [0,4]
    jge remainder24
remainder01:
    iaddq $1, %rdx
    jge remainder1
remainder0:
        jmp Done
remainder1:
        mrmovq (%rdi), %r10
        rmmovq %r10, (%rsi)
        andq %r10, %r10
        jle Nposr10
        iaddq $1, %rax
    Nposr10:
        jmp Done
remainder24:
    iaddq $-1, %rdx
    jge remainder34
remainder2:
        mrmovq (%rdi), %r10
        mrmovq 8(%rdi), %r11
        rmmovq %r10, (%rsi)
        rmmovq %r11, 8(%rsi)
        andq %r10, %r10
        jle Nposr20
        iaddq $1, %rax
    Nposr20:
        andq %r11, %r11
        jle Nposr21
        iaddq $1, %rax
    Nposr21:
        jmp Done
remainder34:
    iaddq $-1, %rdx
    jge remainder4
remainder3:
        mrmovq (%rdi), %r10
        mrmovq 8(%rdi), %r11
        mrmovq 16(%rdi), %r12
        rmmovq %r10, (%rsi)
        rmmovq %r11, 8(%rsi)
        rmmovq %r12, 16(%rsi)
        andq %r10, %r10
        jle Nposr30
        iaddq $1, %rax
    Nposr30:
        andq %r11, %r11
        jle Nposr31
        iaddq $1, %rax
    Nposr31:
        andq %r12, %r12
        jle Nposr32
        iaddq $1, %rax
    Nposr32:
        jmp Done
remainder4:
        mrmovq (%rdi), %r10
        mrmovq 8(%rdi), %r11
        mrmovq 16(%rdi), %r12
        mrmovq 24(%rdi), %r13
        rmmovq %r10, (%rsi)
        rmmovq %r11, 8(%rsi)
        rmmovq %r12, 16(%rsi)
        rmmovq %r13, 24(%rsi)
        andq %r10, %r10
        jle Nposr40
        iaddq $1, %rax
    Nposr40:
        andq %r11, %r11
        jle Nposr41
        iaddq $1, %rax
    Nposr41:
        andq %r12, %r12
        jle Nposr42
        iaddq $1, %rax
    Nposr42:
        andq %r13, %r13
        jle Nposr43
        iaddq $1, %rax
    Nposr43:
        jmp Done
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad -4
	.quad -5
	.quad -6
	.quad -7
	.quad 8
	.quad -9
	.quad -10
	.quad -11
	.quad 12
	.quad 13
	.quad -14
	.quad -15
	.quad -16
	.quad -17
	.quad -18
	.quad -19
	.quad 20
	.quad -21
	.quad -22
	.quad -23
	.quad 24
	.quad -25
	.quad 26
	.quad 27
	.quad -28
	.quad 29
	.quad -30
	.quad -31
	.quad 32
	.quad -33
	.quad -34
	.quad -35
	.quad -36
	.quad 37
	.quad 38
	.quad -39
	.quad -40
	.quad -41
	.quad 42
	.quad -43
	.quad 44
	.quad 45
	.quad 46
	.quad -47
	.quad -48
	.quad -49
	.quad 50
	.quad 51
	.quad 52
	.quad 53
	.quad 54
	.quad 55
	.quad 56
	.quad 57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
