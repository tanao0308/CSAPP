                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f66805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | ##################################################################
                            | # You can modify this portion
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | # 5 个一组的数字一起做
0x034: 702801000000000000   | 	jmp EndLoop0
0x03d:                      | Loop0:
0x03d: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x047: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x051: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x05b: 50d71800000000000000 |     mrmovq 24(%rdi), %r13
0x065: 50e72000000000000000 |     mrmovq 32(%rdi), %r14
0x06f: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x079: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x083: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x08d: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)
0x097: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)
                            | 
0x0a1: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0a3: 71b600000000000000   | 	jle Npos0		    # if so, goto Npos0:
0x0ac: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0b6:                      | Npos0:
0x0b6: 62bb                 | 	andq %r11, %r11
0x0b8: 71cb00000000000000   | 	jle Npos1
0x0c1: c0f00100000000000000 | 	iaddq $1, %rax
0x0cb:                      | Npos1:
0x0cb: 62cc                 | 	andq %r12, %r12
0x0cd: 71e000000000000000   | 	jle Npos2
0x0d6: c0f00100000000000000 | 	iaddq $1, %rax
0x0e0:                      | Npos2:
0x0e0: 62dd                 | 	andq %r13, %r13
0x0e2: 71f500000000000000   | 	jle Npos3
0x0eb: c0f00100000000000000 | 	iaddq $1, %rax
0x0f5:                      | Npos3:
0x0f5: 62ee                 | 	andq %r14, %r14
0x0f7: 710a01000000000000   | 	jle Npos4
0x100: c0f00100000000000000 | 	iaddq $1, %rax
0x10a:                      | Npos4:
0x10a: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len-=5
0x114: c0f72800000000000000 | 	iaddq $40, %rdi		# src+=5
0x11e: c0f62800000000000000 | 	iaddq $40, %rsi		# dst+=5
0x128:                      | EndLoop0:
0x128: 202a                 |     rrmovq %rdx, %r10
0x12a: c0fafbffffffffffffff | 	iaddq $-5, %r10
0x134: 62aa                 |     andq %r10, %r10		# len - 5 >= 0
0x136: 753d00000000000000   |     jge Loop0               # 则跳转
                            | 
                            | # 剩余数字的循环
0x13f:                      | remainder:
0x13f: c0f2feffffffffffffff |     iaddq $-2, %rdx     # len in [0,4]
0x149: 75a001000000000000   |     jge remainder24
0x152:                      | remainder01:
0x152: c0f20100000000000000 |     iaddq $1, %rdx
0x15c: 756e01000000000000   |     jge remainder1
0x165:                      | remainder0:
0x165: 705203000000000000   |         jmp Done
0x16e:                      | remainder1:
0x16e: 50a70000000000000000 |         mrmovq (%rdi), %r10
0x178: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x182: 62aa                 |         andq %r10, %r10
0x184: 719701000000000000   |         jle Nposr10
0x18d: c0f00100000000000000 |         iaddq $1, %rax
0x197:                      |     Nposr10:
0x197: 705203000000000000   |         jmp Done
0x1a0:                      | remainder24:
0x1a0: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x1aa: 750e02000000000000   |     jge remainder34
0x1b3:                      | remainder2:
0x1b3: 50a70000000000000000 |         mrmovq (%rdi), %r10
0x1bd: 50b70800000000000000 |         mrmovq 8(%rdi), %r11
0x1c7: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x1d1: 40b60800000000000000 |         rmmovq %r11, 8(%rsi)
0x1db: 62aa                 |         andq %r10, %r10
0x1dd: 71f001000000000000   |         jle Nposr20
0x1e6: c0f00100000000000000 |         iaddq $1, %rax
0x1f0:                      |     Nposr20:
0x1f0: 62bb                 |         andq %r11, %r11
0x1f2: 710502000000000000   |         jle Nposr21
0x1fb: c0f00100000000000000 |         iaddq $1, %rax
0x205:                      |     Nposr21:
0x205: 705203000000000000   |         jmp Done
0x20e:                      | remainder34:
0x20e: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x218: 75a502000000000000   |     jge remainder4
0x221:                      | remainder3:
0x221: 50a70000000000000000 |         mrmovq (%rdi), %r10
0x22b: 50b70800000000000000 |         mrmovq 8(%rdi), %r11
0x235: 50c71000000000000000 |         mrmovq 16(%rdi), %r12
0x23f: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x249: 40b60800000000000000 |         rmmovq %r11, 8(%rsi)
0x253: 40c61000000000000000 |         rmmovq %r12, 16(%rsi)
0x25d: 62aa                 |         andq %r10, %r10
0x25f: 717202000000000000   |         jle Nposr30
0x268: c0f00100000000000000 |         iaddq $1, %rax
0x272:                      |     Nposr30:
0x272: 62bb                 |         andq %r11, %r11
0x274: 718702000000000000   |         jle Nposr31
0x27d: c0f00100000000000000 |         iaddq $1, %rax
0x287:                      |     Nposr31:
0x287: 62cc                 |         andq %r12, %r12
0x289: 719c02000000000000   |         jle Nposr32
0x292: c0f00100000000000000 |         iaddq $1, %rax
0x29c:                      |     Nposr32:
0x29c: 705203000000000000   |         jmp Done
0x2a5:                      | remainder4:
0x2a5: 50a70000000000000000 |         mrmovq (%rdi), %r10
0x2af: 50b70800000000000000 |         mrmovq 8(%rdi), %r11
0x2b9: 50c71000000000000000 |         mrmovq 16(%rdi), %r12
0x2c3: 50d71800000000000000 |         mrmovq 24(%rdi), %r13
0x2cd: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x2d7: 40b60800000000000000 |         rmmovq %r11, 8(%rsi)
0x2e1: 40c61000000000000000 |         rmmovq %r12, 16(%rsi)
0x2eb: 40d61800000000000000 |         rmmovq %r13, 24(%rsi)
0x2f5: 62aa                 |         andq %r10, %r10
0x2f7: 710a03000000000000   |         jle Nposr40
0x300: c0f00100000000000000 |         iaddq $1, %rax
0x30a:                      |     Nposr40:
0x30a: 62bb                 |         andq %r11, %r11
0x30c: 711f03000000000000   |         jle Nposr41
0x315: c0f00100000000000000 |         iaddq $1, %rax
0x31f:                      |     Nposr41:
0x31f: 62cc                 |         andq %r12, %r12
0x321: 713403000000000000   |         jle Nposr42
0x32a: c0f00100000000000000 |         iaddq $1, %rax
0x334:                      |     Nposr42:
0x334: 62dd                 |         andq %r13, %r13
0x336: 714903000000000000   |         jle Nposr43
0x33f: c0f00100000000000000 |         iaddq $1, %rax
0x349:                      |     Nposr43:
0x349: 705203000000000000   |         jmp Done
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x352:                      | Done:
0x352: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x353:                      | End:
                            | #/* $end ncopy-ys */
0x353:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x358:                      | 	.align 8
0x358:                      | src:
0x358: 0100000000000000     | 	.quad 1
0x360: 0200000000000000     | 	.quad 2
0x368: fdffffffffffffff     | 	.quad -3
0x370: fcffffffffffffff     | 	.quad -4
0x378: fbffffffffffffff     | 	.quad -5
0x380: faffffffffffffff     | 	.quad -6
0x388: f9ffffffffffffff     | 	.quad -7
0x390: 0800000000000000     | 	.quad 8
0x398: f7ffffffffffffff     | 	.quad -9
0x3a0: f6ffffffffffffff     | 	.quad -10
0x3a8: f5ffffffffffffff     | 	.quad -11
0x3b0: 0c00000000000000     | 	.quad 12
0x3b8: 0d00000000000000     | 	.quad 13
0x3c0: f2ffffffffffffff     | 	.quad -14
0x3c8: f1ffffffffffffff     | 	.quad -15
0x3d0: f0ffffffffffffff     | 	.quad -16
0x3d8: efffffffffffffff     | 	.quad -17
0x3e0: eeffffffffffffff     | 	.quad -18
0x3e8: edffffffffffffff     | 	.quad -19
0x3f0: 1400000000000000     | 	.quad 20
0x3f8: ebffffffffffffff     | 	.quad -21
0x400: eaffffffffffffff     | 	.quad -22
0x408: e9ffffffffffffff     | 	.quad -23
0x410: 1800000000000000     | 	.quad 24
0x418: e7ffffffffffffff     | 	.quad -25
0x420: 1a00000000000000     | 	.quad 26
0x428: 1b00000000000000     | 	.quad 27
0x430: e4ffffffffffffff     | 	.quad -28
0x438: 1d00000000000000     | 	.quad 29
0x440: e2ffffffffffffff     | 	.quad -30
0x448: e1ffffffffffffff     | 	.quad -31
0x450: 2000000000000000     | 	.quad 32
0x458: dfffffffffffffff     | 	.quad -33
0x460: deffffffffffffff     | 	.quad -34
0x468: ddffffffffffffff     | 	.quad -35
0x470: dcffffffffffffff     | 	.quad -36
0x478: 2500000000000000     | 	.quad 37
0x480: 2600000000000000     | 	.quad 38
0x488: d9ffffffffffffff     | 	.quad -39
0x490: d8ffffffffffffff     | 	.quad -40
0x498: d7ffffffffffffff     | 	.quad -41
0x4a0: 2a00000000000000     | 	.quad 42
0x4a8: d5ffffffffffffff     | 	.quad -43
0x4b0: 2c00000000000000     | 	.quad 44
0x4b8: 2d00000000000000     | 	.quad 45
0x4c0: 2e00000000000000     | 	.quad 46
0x4c8: d1ffffffffffffff     | 	.quad -47
0x4d0: d0ffffffffffffff     | 	.quad -48
0x4d8: cfffffffffffffff     | 	.quad -49
0x4e0: 3200000000000000     | 	.quad 50
0x4e8: 3300000000000000     | 	.quad 51
0x4f0: 3400000000000000     | 	.quad 52
0x4f8: 3500000000000000     | 	.quad 53
0x500: 3600000000000000     | 	.quad 54
0x508: 3700000000000000     | 	.quad 55
0x510: 3800000000000000     | 	.quad 56
0x518: 3900000000000000     | 	.quad 57
0x520: 3a00000000000000     | 	.quad 58
0x528: 3b00000000000000     | 	.quad 59
0x530: 3c00000000000000     | 	.quad 60
0x538: 3d00000000000000     | 	.quad 61
0x540: 3e00000000000000     | 	.quad 62
0x548: 3f00000000000000     | 	.quad 63
0x550: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x560:                      | 	.align 16
0x560:                      | Predest:
0x560: fadebc0000000000     | 	.quad 0xbcdefa
0x568:                      | dest:
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760:                      | Postdest:
0x760: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x768:                      | .align 8
                            | # Run time stack
0x768: 0000000000000000     | 	.quad 0
0x770: 0000000000000000     | 	.quad 0
0x778: 0000000000000000     | 	.quad 0
0x780: 0000000000000000     | 	.quad 0
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
0x798: 0000000000000000     | 	.quad 0
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
                            | 
0x7e8:                      | Stack:
