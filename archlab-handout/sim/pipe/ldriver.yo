                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6b803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | ##################################################################
                            | # You can modify this portion
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | # 5 个一组的数字一起做
0x034: 712801000000000000   | 	jle EndLoop0
0x03d:                      | Loop0:
0x03d: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x047: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x051: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x05b: 50d71800000000000000 |     mrmovq 24(%rdi), %r13
0x065: 50e72000000000000000 |     mrmovq 32(%rdi), %r14
                            | 
0x06f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x071: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x07b: 718e00000000000000   | 	jle Npos0		    # if so, goto Npos0:
0x084: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x08e:                      | Npos0:
0x08e: 62bb                 | 	andq %r11, %r11
0x090: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x09a: 71ad00000000000000   | 	jle Npos1
0x0a3: c0f00100000000000000 | 	iaddq $1, %rax
0x0ad:                      | Npos1:
0x0ad: 62cc                 | 	andq %r12, %r12
0x0af: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x0b9: 71cc00000000000000   | 	jle Npos2
0x0c2: c0f00100000000000000 | 	iaddq $1, %rax
0x0cc:                      | Npos2:
0x0cc: 62dd                 | 	andq %r13, %r13
0x0ce: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)
0x0d8: 71eb00000000000000   | 	jle Npos3
0x0e1: c0f00100000000000000 | 	iaddq $1, %rax
0x0eb:                      | Npos3:
0x0eb: 62ee                 | 	andq %r14, %r14
0x0ed: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)
0x0f7: 710a01000000000000   | 	jle Npos4
0x100: c0f00100000000000000 | 	iaddq $1, %rax
0x10a:                      | Npos4:
0x10a: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len-=5
0x114: c0f72800000000000000 | 	iaddq $40, %rdi		# src+=5
0x11e: c0f62800000000000000 | 	iaddq $40, %rsi		# dst+=5
0x128:                      | EndLoop0:
0x128: 202a                 |     rrmovq %rdx, %r10
0x12a: c0fafbffffffffffffff | 	iaddq $-5, %r10
0x134: 62aa                 |     andq %r10, %r10		# len - 5 >= 0
0x136: 753d00000000000000   |     jge Loop0               # 则跳转
                            | 
                            | # 剩余数字的循环
0x13f: 718f01000000000000   | 	jle EndLoop1
0x148:                      | Loop1:
0x148: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x152: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x15c: 62aa                 | 	andq %r10, %r10
0x15e: 717101000000000000   | 	jle Npos5
0x167: c0f00100000000000000 | 	iaddq $1, %rax
0x171:                      | Npos5:
0x171: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x17b: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x185: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x18f:                      | EndLoop1:
0x18f: 202a                 |     rrmovq %rdx, %r10
0x191: c0faffffffffffffffff | 	iaddq $-1, %r10
0x19b: 62aa                 |     andq %r10, %r10		# len - 1 >= 0
0x19d: 754801000000000000   |     jge Loop1               # 则跳转
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1a6:                      | Done:
0x1a6: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1a7:                      | End:
                            | #/* $end ncopy-ys */
0x1a7:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1a8:                      | 	.align 8
0x1a8:                      | src:
0x1a8: ffffffffffffffff     | 	.quad -1
0x1b0: 0200000000000000     | 	.quad 2
0x1b8: 0300000000000000     | 	.quad 3
0x1c0: fcffffffffffffff     | 	.quad -4
0x1c8: fbffffffffffffff     | 	.quad -5
0x1d0: faffffffffffffff     | 	.quad -6
0x1d8: f9ffffffffffffff     | 	.quad -7
0x1e0: f8ffffffffffffff     | 	.quad -8
0x1e8: f7ffffffffffffff     | 	.quad -9
0x1f0: f6ffffffffffffff     | 	.quad -10
0x1f8: f5ffffffffffffff     | 	.quad -11
0x200: 0c00000000000000     | 	.quad 12
0x208: 0d00000000000000     | 	.quad 13
0x210: 0e00000000000000     | 	.quad 14
0x218: 0f00000000000000     | 	.quad 15
0x220: 1000000000000000     | 	.quad 16
0x228: 1100000000000000     | 	.quad 17
0x230: 1200000000000000     | 	.quad 18
0x238: 1300000000000000     | 	.quad 19
0x240: 1400000000000000     | 	.quad 20
0x248: ebffffffffffffff     | 	.quad -21
0x250: eaffffffffffffff     | 	.quad -22
0x258: 1700000000000000     | 	.quad 23
0x260: e8ffffffffffffff     | 	.quad -24
0x268: 1900000000000000     | 	.quad 25
0x270: e6ffffffffffffff     | 	.quad -26
0x278: e5ffffffffffffff     | 	.quad -27
0x280: e4ffffffffffffff     | 	.quad -28
0x288: e3ffffffffffffff     | 	.quad -29
0x290: e2ffffffffffffff     | 	.quad -30
0x298: e1ffffffffffffff     | 	.quad -31
0x2a0: 2000000000000000     | 	.quad 32
0x2a8: 2100000000000000     | 	.quad 33
0x2b0: deffffffffffffff     | 	.quad -34
0x2b8: 2300000000000000     | 	.quad 35
0x2c0: dcffffffffffffff     | 	.quad -36
0x2c8: 2500000000000000     | 	.quad 37
0x2d0: 2600000000000000     | 	.quad 38
0x2d8: d9ffffffffffffff     | 	.quad -39
0x2e0: 2800000000000000     | 	.quad 40
0x2e8: d7ffffffffffffff     | 	.quad -41
0x2f0: 2a00000000000000     | 	.quad 42
0x2f8: 2b00000000000000     | 	.quad 43
0x300: 2c00000000000000     | 	.quad 44
0x308: 2d00000000000000     | 	.quad 45
0x310: d2ffffffffffffff     | 	.quad -46
0x318: d1ffffffffffffff     | 	.quad -47
0x320: d0ffffffffffffff     | 	.quad -48
0x328: cfffffffffffffff     | 	.quad -49
0x330: 3200000000000000     | 	.quad 50
0x338: 3300000000000000     | 	.quad 51
0x340: 3400000000000000     | 	.quad 52
0x348: cbffffffffffffff     | 	.quad -53
0x350: caffffffffffffff     | 	.quad -54
0x358: 3700000000000000     | 	.quad 55
0x360: c8ffffffffffffff     | 	.quad -56
0x368: c7ffffffffffffff     | 	.quad -57
0x370: 3a00000000000000     | 	.quad 58
0x378: c5ffffffffffffff     | 	.quad -59
0x380: 3c00000000000000     | 	.quad 60
0x388: c3ffffffffffffff     | 	.quad -61
0x390: 3e00000000000000     | 	.quad 62
0x398: 3f00000000000000     | 	.quad 63
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3b0:                      | 	.align 16
0x3b0:                      | Predest:
0x3b0: fadebc0000000000     | 	.quad 0xbcdefa
0x3b8:                      | dest:
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0:                      | Postdest:
0x5b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5b8:                      | .align 8
                            | # Run time stack
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
                            | 
0x638:                      | Stack:
