                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f68803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | ##################################################################
                            | # You can modify this portion
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | # 5 个一组的数字一起做
0x034: 702801000000000000   | 	jmp EndLoop0
0x03d:                      | Loop0:
0x03d: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x047: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x051: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x05b: 50d71800000000000000 |     mrmovq 24(%rdi), %r13
0x065: 50e72000000000000000 |     mrmovq 32(%rdi), %r14
0x06f: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x079: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x083: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x08d: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)
0x097: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)
                            | 
0x0a1: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0a3: 71b600000000000000   | 	jle Npos0		    # if so, goto Npos0:
0x0ac: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0b6:                      | Npos0:
0x0b6: 62bb                 | 	andq %r11, %r11
0x0b8: 71cb00000000000000   | 	jle Npos1
0x0c1: c0f00100000000000000 | 	iaddq $1, %rax
0x0cb:                      | Npos1:
0x0cb: 62cc                 | 	andq %r12, %r12
0x0cd: 71e000000000000000   | 	jle Npos2
0x0d6: c0f00100000000000000 | 	iaddq $1, %rax
0x0e0:                      | Npos2:
0x0e0: 62dd                 | 	andq %r13, %r13
0x0e2: 71f500000000000000   | 	jle Npos3
0x0eb: c0f00100000000000000 | 	iaddq $1, %rax
0x0f5:                      | Npos3:
0x0f5: 62ee                 | 	andq %r14, %r14
0x0f7: 710a01000000000000   | 	jle Npos4
0x100: c0f00100000000000000 | 	iaddq $1, %rax
0x10a:                      | Npos4:
0x10a: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len-=5
0x114: c0f72800000000000000 | 	iaddq $40, %rdi		# src+=5
0x11e: c0f62800000000000000 | 	iaddq $40, %rsi		# dst+=5
0x128:                      | EndLoop0:
0x128: 202a                 |     rrmovq %rdx, %r10
0x12a: c0fafbffffffffffffff | 	iaddq $-5, %r10
0x134: 62aa                 |     andq %r10, %r10		# len - 5 >= 0
0x136: 753d00000000000000   |     jge Loop0               # 则跳转
                            | 
                            | # 剩余数字的循环
0x13f:                      | remainder:
0x13f: c0f2feffffffffffffff |     iaddq $-2, %rdx     # len in [0,4]
0x149: 75a001000000000000   |     jge remainder24
0x152:                      | remainder01:
0x152: c0f20100000000000000 |     iaddq $1, %rdx
0x15c: 756e01000000000000   |     jge remainder1
0x165:                      | remainder0:
0x165: 705203000000000000   |         jmp Done
0x16e:                      | remainder1:
0x16e: 50a70000000000000000 |         mrmovq (%rdi), %r10
0x178: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x182: 62aa                 |         andq %r10, %r10
0x184: 719701000000000000   |         jle Nposr10
0x18d: c0f00100000000000000 |         iaddq $1, %rax
0x197:                      |     Nposr10:
0x197: 705203000000000000   |         jmp Done
0x1a0:                      | remainder24:
0x1a0: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x1aa: 750e02000000000000   |     jge remainder34
0x1b3:                      | remainder2:
0x1b3: 50a70000000000000000 |         mrmovq (%rdi), %r10
0x1bd: 50b70800000000000000 |         mrmovq 8(%rdi), %r11
0x1c7: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x1d1: 40b60800000000000000 |         rmmovq %r11, 8(%rsi)
0x1db: 62aa                 |         andq %r10, %r10
0x1dd: 71f001000000000000   |         jle Nposr20
0x1e6: c0f00100000000000000 |         iaddq $1, %rax
0x1f0:                      |     Nposr20:
0x1f0: 62bb                 |         andq %r11, %r11
0x1f2: 710502000000000000   |         jle Nposr21
0x1fb: c0f00100000000000000 |         iaddq $1, %rax
0x205:                      |     Nposr21:
0x205: 705203000000000000   |         jmp Done
0x20e:                      | remainder34:
0x20e: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x218: 75a502000000000000   |     jge remainder4
0x221:                      | remainder3:
0x221: 50a70000000000000000 |         mrmovq (%rdi), %r10
0x22b: 50b70800000000000000 |         mrmovq 8(%rdi), %r11
0x235: 50c71000000000000000 |         mrmovq 16(%rdi), %r12
0x23f: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x249: 40b60800000000000000 |         rmmovq %r11, 8(%rsi)
0x253: 40c61000000000000000 |         rmmovq %r12, 16(%rsi)
0x25d: 62aa                 |         andq %r10, %r10
0x25f: 717202000000000000   |         jle Nposr30
0x268: c0f00100000000000000 |         iaddq $1, %rax
0x272:                      |     Nposr30:
0x272: 62bb                 |         andq %r11, %r11
0x274: 718702000000000000   |         jle Nposr31
0x27d: c0f00100000000000000 |         iaddq $1, %rax
0x287:                      |     Nposr31:
0x287: 62cc                 |         andq %r12, %r12
0x289: 719c02000000000000   |         jle Nposr32
0x292: c0f00100000000000000 |         iaddq $1, %rax
0x29c:                      |     Nposr32:
0x29c: 705203000000000000   |         jmp Done
0x2a5:                      | remainder4:
0x2a5: 50a70000000000000000 |         mrmovq (%rdi), %r10
0x2af: 50b70800000000000000 |         mrmovq 8(%rdi), %r11
0x2b9: 50c71000000000000000 |         mrmovq 16(%rdi), %r12
0x2c3: 50d71800000000000000 |         mrmovq 24(%rdi), %r13
0x2cd: 40a60000000000000000 |         rmmovq %r10, (%rsi)
0x2d7: 40b60800000000000000 |         rmmovq %r11, 8(%rsi)
0x2e1: 40c61000000000000000 |         rmmovq %r12, 16(%rsi)
0x2eb: 40d61800000000000000 |         rmmovq %r13, 24(%rsi)
0x2f5: 62aa                 |         andq %r10, %r10
0x2f7: 710a03000000000000   |         jle Nposr40
0x300: c0f00100000000000000 |         iaddq $1, %rax
0x30a:                      |     Nposr40:
0x30a: 62bb                 |         andq %r11, %r11
0x30c: 711f03000000000000   |         jle Nposr41
0x315: c0f00100000000000000 |         iaddq $1, %rax
0x31f:                      |     Nposr41:
0x31f: 62cc                 |         andq %r12, %r12
0x321: 713403000000000000   |         jle Nposr42
0x32a: c0f00100000000000000 |         iaddq $1, %rax
0x334:                      |     Nposr42:
0x334: 62dd                 |         andq %r13, %r13
0x336: 714903000000000000   |         jle Nposr43
0x33f: c0f00100000000000000 |         iaddq $1, %rax
0x349:                      |     Nposr43:
0x349: 705203000000000000   |         jmp Done
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x352:                      | Done:
0x352: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x353:                      | End:
                            | #/* $end ncopy-ys */
0x353:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x358:                      | 	.align 8
0x358:                      | src:
0x358: ffffffffffffffff     | 	.quad -1
0x360: 0200000000000000     | 	.quad 2
0x368: 0300000000000000     | 	.quad 3
0x370: fcffffffffffffff     | 	.quad -4
0x378: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x380:                      | 	.align 16
0x380:                      | Predest:
0x380: fadebc0000000000     | 	.quad 0xbcdefa
0x388:                      | dest:
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8:                      | Postdest:
0x3a8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3b0:                      | .align 8
                            | # Run time stack
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
                            | 
0x430:                      | Stack:
