                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6d801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | ##################################################################
                            | # You can modify this portion
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | # 5 个一组的数字一起做
0x034: 712801000000000000   | 	jle EndLoop0
0x03d:                      | Loop0:
0x03d: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x047: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x051: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x05b: 50d71800000000000000 |     mrmovq 24(%rdi), %r13
0x065: 50e72000000000000000 |     mrmovq 32(%rdi), %r14
                            | 
0x06f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x071: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x07b: 718e00000000000000   | 	jle Npos0		    # if so, goto Npos0:
0x084: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x08e:                      | Npos0:
0x08e: 62bb                 | 	andq %r11, %r11
0x090: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x09a: 71ad00000000000000   | 	jle Npos1
0x0a3: c0f00100000000000000 | 	iaddq $1, %rax
0x0ad:                      | Npos1:
0x0ad: 62cc                 | 	andq %r12, %r12
0x0af: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x0b9: 71cc00000000000000   | 	jle Npos2
0x0c2: c0f00100000000000000 | 	iaddq $1, %rax
0x0cc:                      | Npos2:
0x0cc: 62dd                 | 	andq %r13, %r13
0x0ce: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)
0x0d8: 71eb00000000000000   | 	jle Npos3
0x0e1: c0f00100000000000000 | 	iaddq $1, %rax
0x0eb:                      | Npos3:
0x0eb: 62ee                 | 	andq %r14, %r14
0x0ed: 40e62000000000000000 | 	rmmovq %r14, 32(%rsi)
0x0f7: 710a01000000000000   | 	jle Npos4
0x100: c0f00100000000000000 | 	iaddq $1, %rax
0x10a:                      | Npos4:
0x10a: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len-=5
0x114: c0f72800000000000000 | 	iaddq $40, %rdi		# src+=5
0x11e: c0f62800000000000000 | 	iaddq $40, %rsi		# dst+=5
0x128:                      | EndLoop0:
0x128: 202a                 |     rrmovq %rdx, %r10
0x12a: c0fafbffffffffffffff | 	iaddq $-5, %r10
0x134: 62aa                 |     andq %r10, %r10		# len - 5 >= 0
0x136: 753d00000000000000   |     jge Loop0               # 则跳转
                            | 
                            | # 剩余数字的循环
0x13f: 718f01000000000000   | 	jle EndLoop1
0x148:                      | Loop1:
0x148: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x152: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x15c: 62aa                 | 	andq %r10, %r10
0x15e: 717101000000000000   | 	jle Npos5
0x167: c0f00100000000000000 | 	iaddq $1, %rax
0x171:                      | Npos5:
0x171: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x17b: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x185: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x18f:                      | EndLoop1:
0x18f: 202a                 |     rrmovq %rdx, %r10
0x191: c0faffffffffffffffff | 	iaddq $-1, %r10
0x19b: 62aa                 |     andq %r10, %r10		# len - 1 >= 0
0x19d: 754801000000000000   |     jge Loop1               # 则跳转
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1a6:                      | Done:
0x1a6: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1a7:                      | End:
                            | #/* $end ncopy-ys */
0x1a7:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1a8:                      | 	.align 8
0x1a8:                      | src:
0x1a8: ffffffffffffffff     | 	.quad -1
0x1b0: feffffffffffffff     | 	.quad -2
0x1b8: 0300000000000000     | 	.quad 3
0x1c0: 0400000000000000     | 	.quad 4
0x1c8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1d0:                      | 	.align 16
0x1d0:                      | Predest:
0x1d0: fadebc0000000000     | 	.quad 0xbcdefa
0x1d8:                      | dest:
0x1d8: abefcd0000000000     | 	.quad 0xcdefab
0x1e0: abefcd0000000000     | 	.quad 0xcdefab
0x1e8: abefcd0000000000     | 	.quad 0xcdefab
0x1f0: abefcd0000000000     | 	.quad 0xcdefab
0x1f8:                      | Postdest:
0x1f8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x200:                      | .align 8
                            | # Run time stack
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
                            | 
0x280:                      | Stack:
