                            | # INIT
0x000:                      |     .align 8 # 这表示将接下来的数据对齐到8字节边界上，以确保数据在内存中按8字节对齐
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp # 初始化 rsp 寄存器（初始为栈顶指针）
0x00a: 804400000000000000   |     call main
0x013: 00                   |     halt # halt 指令用于终止程序的执行。
                            | 
                            | # DATA
0x014:                      | src:
0x014: 0a00000000000000     |     .quad 0x00a
0x01c: b000000000000000     |     .quad 0x0b0
0x024: 000c000000000000     |     .quad 0xc00
0x02c:                      | dest:
0x02c: 1101000000000000     |     .quad 0x111
0x034: 2202000000000000     |     .quad 0x222
0x03c: 3303000000000000     |     .quad 0x333
                            | 
                            | # CODE
0x044:                      | main:
                            |     # rdi rsi rdx
0x044: 30f71400000000000000 |     irmovq src, %rdi
0x04e: 30f62c00000000000000 |     irmovq dest, %rsi
0x058: 30f20300000000000000 |     irmovq $3, %rdx // 立即数前面要加 $  $3
0x062: 806c00000000000000   |     call copy_block
0x06b: 90                   |     ret
                            | 
0x06c:                      | copy_block:
0x06c: 30f90800000000000000 |     irmovq $8, %r9
0x076: 30fa0100000000000000 |     irmovq $1, %r10
0x080: 6300                 |     xorq %rax, %rax
0x082:                      | loop:
0x082: 6222                 |     andq %rdx, %rdx
0x084: 73b000000000000000   |     je endloop
                            | 
0x08d: 50870000000000000000 |     mrmovq (%rdi), %r8 # mr: memory to register
0x097: 40860000000000000000 |     rmmovq %r8, (%rsi) # rm: register to memory
                            | 
                            |     # TODO ++src, ++dest, --len
0x0a1: 6097                 |     addq %r9, %rdi
0x0a3: 6096                 |     addq %r9, %rsi
0x0a5: 61a2                 |     subq %r10, %rdx
                            | 
0x0a7: 708200000000000000   |     jmp loop
0x0b0:                      | endloop:
0x0b0: 90                   |     ret
                            | 
                            | # STACK
0x200:                      | 	.pos 0x200
0x200:                      | stack:
